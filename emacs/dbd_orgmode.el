(setq diary-file "~/.diary")
(setq mark-diary-entries-in-calendar t)
;(diary)

;; The following lines are always needed. Choose your own keys.
(add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\)$" . org-mode))
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
(add-hook 'org-mode-hook 'turn-on-font-lock)

(require 'org-capture)
(require 'remember)

(setq org-directory (concat mydrive "/orgfiles/"))
(setq org-directory-todo (concat org-directory "todo/"))
(setq org-default-notes-file (concat org-directory "notes.org"))
(setq todo-org-capture (concat org-directory "TODO.org"))
;(setq todo-django (concat org-directory-todo "DJANGO.org"))
(setq todo-dlang (concat org-directory-todo "DLANG.org"))
(setq todo-dart (concat org-directory-todo "DART.org"))
(setq todo-auction (concat org-directory-todo "AUCTION.org"))
(setq todo-pyramid (concat org-directory-todo "PYRAMID.org"))
(setq todo-go (concat org-directory-todo "GO.org"))
(setq todo-sqlalchemy (concat org-directory-todo "SQL_ALCHEMY.org"))
(setq todo-xbrl (concat org-directory-todo "XBRL.org"))
(setq todo-plusauri (concat org-directory "/plusauri/PLUSAURI.org"))
(setq todo-sencha (concat org-directory "/plusauri/SENCHA.org"))

(setq todo-org-r-tasks (concat org-directory "R_TASKS.org"))
(setq todo-org-python (concat org-directory "PYTHON.org"))
(setq todo-useful-linux-stuff (concat org-directory "misc/USEFUL_LINUX_STUFF.org"))
(setq todo-org-journal (concat org-directory "JOURNAL.org"))
(setq todo-org-business-ideas (concat org-directory "misc/BUSINESS_IDEAS.org"))
(setq todo-org-h5-proj (concat org-directory "H5_PROJ.org"))
(setq diet (concat org-directory "/misc/diet.org"))
(setq org-todo-keywords (quote ((sequence "TODO(t)" "STARTED(s!)" "|" "DONE(d!/!)")
 (sequence "WAITING(w@/!)" "SOMEDAY(S!)" "OPEN(O@)" "|" "CANCELLED(c@/!)")
 )))

(setq org-todo-keyword-faces (quote (("TODO" :foreground "red" :weight bold)
 ("STARTED" :foreground "blue" :weight bold)
 ("DONE" :foreground "forest green" :weight bold)
 ("WAITING" :foreground "orange" :weight bold)
 ("SOMEDAY" :foreground "magenta" :weight bold)
 ("CANCELLED" :foreground "forest green" :weight bold)
 ("QUOTE" :foreground "red" :weight bold)
 ("QUOTED" :foreground "magenta" :weight bold)
 ("APPROVED" :foreground "forest green" :weight bold)
 ("EXPIRED" :foreground "forest green" :weight bold)
 ("REJECTED" :foreground "forest green" :weight bold)
 ("OPEN" :foreground "blue" :weight bold))))

(setq org-use-fast-todo-selection t)
(setq org-treat-S-cursor-todo-selection-as-state-change nil)

(setq org-tag-alist 
  (quote (
    ("javascript" . ?j)
    ("django" . ?J)
    ("dlang" . ?D)
    ("sqlalchemy" . ?A)
    ("pyramid" . ?P)
    ("go" . ?g)
    ("@work" . ?w)
    ("@home" . ?H)
    ("@karen" . ?k)
;    ("adoption" . ?a)
    ("auction" . ?a)
    ("business_hours" . ?b)
    ("build" . ?B)
    ("codegen" . ?c)
    ("cpp" . ?C)
    ("database" . ?d)
    ("emacs" . ?E)
    ("family" . ?f)
    ("hdf5" . ?h)
    ("health" . ?m)
    ("orm" . ?o)
    ("quick" . ?q)
    ("reminder" . ?r)
    ("ruby" . ?R)
    ("store" . ?s)
    ("school" . ?S)
    ("tickler" . ?t)
    ("USEFUL_INFO" . ?U)
)))

(setq org-tag-faces
   '(
     ("@work" . (:background "white" :foreground "black" :weight "bold" :italic t))
     ("@home" . (:background "white" :foreground "navy" :weight "bold" :italic nil))
     ("@karen" . (:background "white" :foreground "navy" :weight "bold" :italic nil))
     ("adoption" . (:background "white" :foreground "navy" :weight "bold" :italic nil))
     ("business_hours" . (:background "white" :foreground "dark red" :weight "bold" :italic nil))
     ("build" . (:background "white" :foreground "DeepPink3" :weight "bold" :italic nil))
     ("codegen" . (:background "white" :foreground "DeepPink4" :weight "bold" :italic nil))
     ("cpp" . (:background "white" :foreground "OliveDrab4" :weight "bold" :italic nil))
     ("database" . (:background "white" :foreground "OliveDrab4" :weight "bold" :italic nil))
     ("emacs" . (:background "white" :foreground "DarkOliveGreen4" :weight "bold" :italic nil))
     ("family" . (:background "white" :foreground "navy" :weight "bold" :italic nil))
     ("hdf5" . (:background "white" :foreground "PaleGreen4" :weight "bold" :italic nil))
     ("health" . (:background "white" :foreground "navy" :weight "bold" :italic nil))
     ("orm" . (:background "white" :foreground "DarkOliveGreen4" :weight "bold" :italic nil))
     ("quick" . (:background "white" :foreground "honeydew4" :weight "bold" :italic nil))
     ("reminder" . (:background "white" :foreground "black" :weight "bold" :italic nil))
     ("ruby" . (:background "white" :foreground "dark red" :weight "bold" :italic nil))
     ("store" . (:background "white" :foreground "dark red" :weight "bold" :italic nil))
     ("school" . (:background "white" :foreground "dark red" :weight "bold" :italic nil))
     ("tickler" . (:background "white" :foreground "dark goldenrod" :weight "bold" :italic nil))
     ("USEFUL_INFO" . (:background "white" :foreground "black" :weight "bold" :italic nil))
     )
)

(setq org-stuck-projects 
      '("+LEVEL=2/-DONE" ("NEXT" "NEXTACTION" "BLOGS") ("DOCONLY") "NEXTACTION"))

(setq org-todo-state-tags-triggers
      (quote (("CANCELLED" ("CANCELLED" . t))
              ("WAITING" ("WAITING" . t) ("NEXT"))
              ("SOMEDAY" ("WAITING" . t))
              (done ("NEXT") ("WAITING"))
              ("TODO" ("WAITING") ("CANCELLED") ("NEXT"))
              ("DONE" ("WAITING") ("CANCELLED") ("NEXT")))))
;; Change task state to STARTED when clocking in
(setq org-clock-in-switch-to-state "STARTED")

(define-key global-map "\C-cr" 'org-capture)
(setq org-agenda-files 
      (list 
       (concat org-directory-todo "BOOKS_TO_READ.org")
       (concat org-directory-todo "CODEGEN.org")
;       (concat org-directory-todo "DB.org")
       (concat org-directory-todo "DLANG.org")
       (concat org-directory-todo "DART.org")
       (concat org-directory-todo "AUCTION.org")
;       (concat org-directory-todo "RUBY.org")
       (concat org-directory-todo "FAMILY.org")
       (concat org-directory-todo "HEALTH.org")
;       (concat org-directory-todo "H5_PROJ.org")
;       (concat org-directory-todo "PYTHON.org")
;       (concat org-directory-todo "SCHOOL.org")
;       (concat org-directory-todo "TRADING.org")
;       (concat org-directory-todo "R_TASKS.org")
;       (concat org-directory-todo "QT.org")
;       (concat org-directory-todo "QUANT.org")
       (concat org-directory-todo "ORGMODE.org")
       (concat org-directory-todo "VOCAB.org")
       (concat org-directory-todo "MONGO.org")
;       (concat org-directory-todo "DJANGO.org")
;       (concat org-directory-todo "PYRAMID.org")
;       (concat org-directory-todo "GO.org")
;       (concat org-directory-todo "SQL_ALCHEMY.org")
       (concat todo-plusauri)
       (concat org-directory "/plusauri/stages.org")
       (concat org-directory "JOURNAL.org")
       (concat org-directory "TICKLER_LINUX.org")
       (concat org-directory "TODO.org")
      ))
    
(string= todo-org-capture (concat mydrive "/orgfiles/TODO.org"))
(setq org-capture-templates
      '(("t" "Todo" entry (file+headline todo-org-capture "Tasks")
         "* TODO %U %?\n %i\n %a")
        ("D" "dart" entry (file+headline todo-dart "Tasks")
         "* TODO %U %?\n %i\n %a")        
        ("p" "plusauri" entry (file+headline todo-plusauri "Tasks")
         "* TODO %U %?\n %i\n %a")        
        
        ))
;       (list "Django" ?d "* TODO %U %?\n %i\n %a" todo-django "Tasks")
       ;; (list "dlang" ?d "* TODO %U %?\n %i\n %a" todo-dlang "Tasks")
        ;; (list "auction" ?a "* TODO %U %?\n %i\n %a" todo-auction "Tasks")
       ;; (list "Pyramid" ?P "* TODO %U %?\n %i\n %a" todo-pyramid "Tasks")
       ;; (list "Go" ?g "* TODO %U %?\n %i\n %a" todo-go "Tasks")
       ;; (list "SqlAlchemy" ?A "* TODO %U %?\n %i\n %a" todo-sqlalchemy "Tasks")
;       (list "H5Proj" ?h "* %u %?\n\n %i\n %a" todo-org-h5-proj "H5 Thoughts")))

(setq org-startup-folded t)
;(find-file todo-org-journal)
;(find-file todo-org-h5-proj)
;(find-file todo-org-r-tasks)
(find-file diet)
(find-file todo-org-capture)
(find-file todo-plusauri)
;(find-file todo-sencha)
;(find-file todo-dlang)
;(find-file todo-auction)
;(find-file todo-django)
;(find-file todo-pyramid)
;(find-file todo-sqlalchemy)
;(find-file todo-go)
(setq inhibit-startup-message t)

(defun ag-@work() (interactive) 
  (save-excursion
   (org-tags-view t "@work")
   (kill-matching-buffers-by-name "Org Agenda (@work)")
   (rename-buffer "*Org Agenda (@work) *")))
(defun ag-@home() (interactive) 
  (save-excursion
   (org-tags-view t "@home")
   (kill-matching-buffers-by-name "Org Agenda (@home)")
   (rename-buffer "*Org Agenda (@home) *")))
(defun ag-@karen() (interactive) 
  (save-excursion
   (org-tags-view t "@karen")
   (kill-matching-buffers-by-name "Org Agenda (@karen)")
   (rename-buffer "*Org Agenda (@karen) *")))
(defun ag-adoption() (interactive) 
  (save-excursion
   (org-tags-view t "adoption")
   (kill-matching-buffers-by-name "Org Agenda (adoption)")
   (rename-buffer "*Org Agenda (adoption) *")))
(defun ag-business_hours() (interactive) 
  (save-excursion
   (org-tags-view t "business_hours")
   (kill-matching-buffers-by-name "Org Agenda (business_hours)")
   (rename-buffer "*Org Agenda (business_hours) *")))
(defun ag-build() (interactive) 
  (save-excursion
   (org-tags-view t "build")
   (kill-matching-buffers-by-name "Org Agenda (build)")
   (rename-buffer "*Org Agenda (build) *")))
(defun ag-codegen() (interactive) 
  (save-excursion
   (org-tags-view t "codegen")
   (kill-matching-buffers-by-name "Org Agenda (codegen)")
   (rename-buffer "*Org Agenda (codegen) *")))
(defun ag-cpp() (interactive) 
  (save-excursion
   (org-tags-view t "cpp")
   (kill-matching-buffers-by-name "Org Agenda (cpp)")
   (rename-buffer "*Org Agenda (cpp) *")))
(defun ag-database() (interactive) 
  (save-excursion
   (org-tags-view t "database")
   (kill-matching-buffers-by-name "Org Agenda (database)")
   (rename-buffer "*Org Agenda (database) *")))
(defun ag-emacs() (interactive) 
  (save-excursion
   (org-tags-view t "emacs")
   (kill-matching-buffers-by-name "Org Agenda (emacs)")
   (rename-buffer "*Org Agenda (emacs) *")))
(defun ag-family() (interactive) 
  (save-excursion
   (org-tags-view t "family")
   (kill-matching-buffers-by-name "Org Agenda (family)")
   (rename-buffer "*Org Agenda (family) *")))
(defun ag-hdf5() (interactive) 
  (save-excursion
   (org-tags-view t "hdf5")
   (kill-matching-buffers-by-name "Org Agenda (hdf5)")
   (rename-buffer "*Org Agenda (hdf5) *")))
(defun ag-health() (interactive) 
  (save-excursion
   (org-tags-view t "health")
   (kill-matching-buffers-by-name "Org Agenda (health)")
   (rename-buffer "*Org Agenda (health) *")))
(defun ag-orm() (interactive) 
  (save-excursion
   (org-tags-view t "orm")
   (kill-matching-buffers-by-name "Org Agenda (orm)")
   (rename-buffer "*Org Agenda (orm) *")))
(defun ag-quick() (interactive) 
  (save-excursion
   (org-tags-view t "quick")
   (kill-matching-buffers-by-name "Org Agenda (quick)")
   (rename-buffer "*Org Agenda (quick) *")))
(defun ag-reminder() (interactive) 
  (save-excursion
   (org-tags-view t "reminder")
   (kill-matching-buffers-by-name "Org Agenda (reminder)")
   (rename-buffer "*Org Agenda (reminder) *")))
(defun ag-ruby() (interactive) 
  (save-excursion
   (org-tags-view t "ruby")
   (kill-matching-buffers-by-name "Org Agenda (ruby)")
   (rename-buffer "*Org Agenda (ruby) *")))
(defun ag-store() (interactive) 
  (save-excursion
   (org-tags-view t "store")
   (kill-matching-buffers-by-name "Org Agenda (store)")
   (rename-buffer "*Org Agenda (store) *")))
(defun ag-school() (interactive) 
  (save-excursion
   (org-tags-view t "school")
   (kill-matching-buffers-by-name "Org Agenda (school)")
   (rename-buffer "*Org Agenda (school) *")))
(defun ag-tickler() (interactive) 
  (save-excursion
   (org-tags-view t "tickler")
   (kill-matching-buffers-by-name "Org Agenda (tickler)")
   (rename-buffer "*Org Agenda (tickler) *")))
(defun ag-USEFUL_INFO() (interactive) 
  (save-excursion
   (org-tags-view t "USEFUL_INFO")
   (kill-matching-buffers-by-name "Org Agenda (USEFUL_INFO)")
   (rename-buffer "*Org Agenda (USEFUL_INFO) *")))
(defun ag-coding() (interactive) 
   (org-tags-view t "cpp|ruby|emacs|database|hdf5|codegen|orm")
   (kill-matching-buffers-by-name "Org Agenda (coding)")
   (rename-buffer "*Org Agenda (coding)*"))

(defun ag-refresh-all() (interactive) 
  (kill-matching-buffers-by-name "*Org Agenda")
  (ag-coding)
  (ag-@work)
  (ag-@home)
  (ag-@karen)
  (ag-adoption)
  (ag-business_hours)
  (ag-build)
  (ag-codegen)
  (ag-cpp)
  (ag-database)
  (ag-emacs)
  (ag-family)
  (ag-hdf5)
  (ag-health)
  (ag-orm)
  (ag-quick)
  (ag-reminder)
  (ag-ruby)
  (ag-store)
  (ag-school)
  (ag-tickler)
  (ag-USEFUL_INFO)
)

(require 'cdlatex)
;(add-hook 'org-mode-hook 'turn-on-org-cdlatex)

;(require 'org-latex)
;; (setq org-export-latex-listings t)
;; (add-to-list 'org-export-latex-classes
;;              '("org-article"
;;                "\\documentclass{org-article}
;;                  [NO-DEFAULT-PACKAGES]
;;                  [EXTRA]"
;;                ("\\section{%s}" . "\\section*{%s}")
;;                ("\\subsection{%s}" . "\\subsection*{%s}")
;;                ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
;;                ("\\paragraph{%s}" . "\\paragraph*{%s}")
;;                ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
